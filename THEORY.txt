
→→→ PYTHON ←←←

- Python Indentation -
	Indentation refers to the spaces at the beginning of the code line.
	The python Indentation is very important.
	Python uses indentation to indicate a block of code.
	Python will give you an error if you skip the indentation.
- Python variables -
	variables are created when you assign a value to it.
	Variables are containers for storing data values.
	python can automatically diffrentiate its value type as int,float or something else.
	syntax:::
	   variable_name = variable_value
	Python has no command for declaring a variable as in other languages.
	
	-- CASTING --
	if we want to specify the data type of a variable. this can be done by casting.
	syntax:::
	variable_name = data_type(variable_name)

** we can get the type of the variable_type by using a inbuild function [[type()]]
** for strings we can use either double quotes or single quotes.
** python variable names are case sensitive.
	i.e, a and A are not same.

	--- VARIABLE NAMES ---
	a variable name can be single letter or a word .
	A variable name must start with a letter or the underscore character
	A variable name cannot start with a number
	A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
	Variable names are case-sensitive (age, Age and AGE are three different variables)
	A variable name is case-sensitive.

	-- MULTIPLE WORDS VARIABLE NAMES --
	/*/ CAMEL CASE
	    Each word, except the first, starts with a capital letter.
	/*/ PASCAL CASE
	    Each word starts with a capital letter.
	/*/ SNAKE CASE
	    Each word is separated by an underscore character.

	multiple variables can be written in one line.
	syntax:::
	Variable_name1, Variable_name2 = variable_value1, variable_value2
	Number of variables should match the number of values .
	Python supports concatenation of variables of same data type.

	--- GLOBAL | LOCAL VARIABLE ---
	The variables which are created outside the function is known as global variable.
	Global keywords can be used inside the function or outside the function.
	If we mention a local variable with the same name as global then the values will not override each other.
	To define a global variable we add a global keyword in front of the var.
	If we want to used a global variable inside a function then we need to use as the variable as global variable_name only .


- Comments - 
	python comments start with #.
	comments can be used to explain the python code.
	commwnts can be used to make code more readable.
	syntax:::
	# something which we want to write .
	
	*multiline comments*
	python multiline comments can be declared using " 
	syntax:::
	" " "
	//code | something that we want to define in a function
	.........................
	.........................
	" " "

--- DATA TYPES ---
In programming data types are very important.
python has the following data-types.
	* str - string [ text-type ] 	        - "hello world"
	* int - integer [ numeric-type ]       - 20
	* float [ numeric-type ]	        - 20.5
	* complex [ numeric type ]            - complex number i.e, 8+6j
	* list [sequence type ]	        - [ "apple", "banana", "cherry" ]
	* tuple [ sequence type ]	        - ( "apple", "banana", "cherry" )
	* range [ sequence type ]	        - range(6)
	* dict - dictionary [ mapping type ]  - { "name" : "john" }
	* set [ set-types ]		        - { "apple", "banana", "cherry" }
	* frozenset [ set-types ]	        - frozenset({"apple", "banana" })
	* bool [ boolean ]                     - true|false
	* bytes [ binary-type ]                - b"hello"
	* bytearray [ binary-type ]            - bytearray(5)
	* memory view [ binary-type ]         - memoryview(bytes(5))

	As we have discussed we can use casing in the datatypes.

--- RANDOM MODULE ---
	Python does not have a random() function to make a random number, but 
	Python has a built-in module called random that can be used to make random numbers.
	

--- STRINGS ---
	String in python are surrounded by either single quotation marks or double quotation marks.
	we can store a string in a variable.
	syntax:::
	   variable_name = "string"

	we can also use multiline string assigned to a variable with the same multiline comments syntax.
	Strings can be used for indexing.
	strings supports unicode characters as arrays.
	syntax:::
	variable_name = "string name"
	print(variable_name[2])
		this prints us the letter r in the output .

	we can loop string with a for loop for the characters present in the string.	
	we can find the length of the string by using len() inbuild function.
	As strings supports indexing then these string also support slicing.
	which means that we can pick the charcters we want.
	syntax:::
	var_name = "string string"
	print(var_name[index_num:index_num])
	
	The first character has an index number of 0.
	
	if we donot mention the index_num then it will go till the end of the string.
	Negative indexing starts from the back.
	
	python has set of built-in methods that you can use on strings.
	** Upper case
	   upper() method returns the string in upper case.
	** Lower case
	   lower() method returns the string in lower case.
	** remove whitespace
	   strip() function is used to remove space at the end and beginning of the text.
	** Replace string
	   replace() method replaces a string with another string.
	** split string
	   split() method returns a list where the text b|w the specified separator.
	
	--- String Concatenation ---
	string supports '+' operator to concadenate strings.
	
	--- String Format ---
	we can combine strings and numbers by using the format() method.
	The format() method takes the passed arguments, formats them, 
	and places them in the string where the placeholders {} .
	Syntax:::
	var_name1 = var_value1
	var_name2 = var_value2
	var_name3 = var_value3
	var_actual_name = " string {} string {} string {} "
	print(var_actual_name . format(var_name1, var_name2, var_name3))

	--- Escape Characters ---
	\'	Single Quote	
	\\	Backslash	
	\n	New Line	
	\r	Carriage Return	
	\t	Tab	
	\b	Backspace	
	\f	Form Feed	
	\ooo	Octal value	
	\xhh	Hex value

	--- String Methods ---
	python has a set of built-in methods that you can use on str.
	
Capitalize()       Converts the first character to upper case.
Casefold()         Converts string into lower case.
Centre()           returns a centered string.
count()            Returns the number of times a specified value occurs in a string
encode()	         Returns an encoded version of the string
endswith()	       Returns true if the string ends with the specified value
expandtabs()	     Sets the tab size of the string
find()	           Searches the string for a specified value and returns the position of where it was found
format()	         Formats specified values in a string
format_map()     	 Formats specified values in a string
index()          	 Searches the string for a specified value and returns the position of where it was found
isalnum()	         Returns True if all characters in the string are alphanumeric
isalpha()	         Returns True if all characters in the string are in the alphabet
isdecimal()	       Returns True if all characters in the string are decimals
isdigit()	         Returns True if all characters in the string are digits
isidentifier()	   Returns True if the string is an identifier
islower()	         Returns True if all characters in the string are lower case
isnumeric()	       Returns True if all characters in the string are numeric
isprintable()	     Returns True if all characters in the string are printable
isspace()	         Returns True if all characters in the string are whitespaces
istitle()	         Returns True if the string follows the rules of a title
isupper()	         Returns True if all characters in the string are upper case
join()	           Joins the elements of an iterable to the end of the string
ljust()	           Returns a left justified version of the string
lower()  	         Converts a string into lower case
lstrip()	         Returns a left trim version of the string
maketrans()	       Returns a translation table to be used in translations
partition()	       Returns a tuple where the string is parted into three parts
replace()	         Returns a string where a specified value is replaced with a specified value
rfind()	           Searches the string for a specified value and returns the last position of where it was found
rindex()	         Searches the string for a specified value and returns the last position of where it was found
rjust()	           Returns a right justified version of the string
rpartition()	     Returns a tuple where the string is parted into three parts
rsplit()	         Splits the string at the specified separator, and returns a list
rstrip()	         Returns a right trim version of the string
split()	           Splits the string at the specified separator, and returns a list
splitlines()	     Splits the string at line breaks and returns a list
startswith()	     Returns true if the string starts with the specified value
strip()	           Returns a trimmed version of the string
swapcase()	       Swaps cases, lower case becomes upper case and vice versa
title()	           Converts the first character of each word to upper case
translate()	       Returns a translated string
upper()	           Converts a string into upper case
zfill()	           Fills the string with a specified number of 0 values at the beginning


--- Python Booleans ---
  booleans represent only two values: True or False .
  when we compare something in python then python evaluates it under bool conditions.
  even functions can return bool values.
  
--- Python Operators ---
  Operators are used to perform operations on variables and values.
  
*Arithmetic operators
    +	Addition	
    -	Subtraction	
    *	Multiplication	
    /	Division	
    %	Modulus	
    **	Exponentiation	
    //	Floor division	

*Assignment operators
    =	x = 5	x = 5	
    +=	x += 3	x = x + 3	
    -=	x -= 3	x = x - 3	
    *=	x *= 3	x = x * 3	
    /=	x /= 3	x = x / 3	
    %=	x %= 3	x = x % 3	
    //=	x //= 3	x = x // 3	
    **=	x **= 3	x = x ** 3	
    &=	x &= 3	x = x & 3	
    |=	x |= 3	x = x | 3	
    ^=	x ^= 3	x = x ^ 3	
    >>=	x >>= 3	x = x >> 3	
    <<=	x <<= 3	x = x << 3
    
*Comparison operators
    ==	Equal	x == y	
    !=	Not equal	x != y	
    >	Greater than	x > y	
    <	Less than	x < y	
    >=	Greater than or equal to	x >= y	
    <=	Less than or equal to	x <= y
    
*Logical operators
    and 	  Returns True if both statements are true	                  x < 5 and  x < 10	
    or	    Returns True if one of the statements is true	              x < 5 or x < 4	
    not	    Reverse the result, returns False if the result is true	not (x < 5 and x < 10)
    
*Identity operators
    is 	      Returns True if both variables are the same object	    x is y	
    is not	  Returns True if both variables are not the same object	x is not y
    
*Membership operators
    in 	          Returns True if a sequence with the specified value is present in the object	x in y	
    not in	      Returns True if a sequence with the specified value is not present in the object	x not in y
*Bitwise operators
   & 	AND	Sets each bit to 1 if both bits are 1
   |	OR	Sets each bit to 1 if one of two bits is 1
   ^	XOR	Sets each bit to 1 if only one of two bits is 1
   ~ 	NOT	Inverts all the bits
   <<	Zero fill left shift	Shift left by pushing zeros in from the right and let the leftmost bits fall off
   >>	Signed right shift	Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off 

  
		
